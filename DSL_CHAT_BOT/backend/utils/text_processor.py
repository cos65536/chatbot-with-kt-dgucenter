import pandas as pd

class TextProcessor:
    def __init__(self):
        # 동의어 사전
        self.SYNONYMS = {
            "편의점": ["편의점", "CVS", "소매업","GS25","CU","세븐일레븐","이마트24"],
            "카페/제과제빵": ["카페", "커피", "베이커리", "제과", "디저트","브런치", "디저트카페", "크레페", "샌드위치", "수제청","케이크", "마카롱"],
            "치킨": ["치킨", "닭", "프라이드", "양념치킨"],
            "한식": ["한식", "백반", "정식", "국밥", "찌개","해장국", "칼국수", "뼈해장국", "전골", "보쌈","뭉티기"],
            "일식": ["일식", "초밥", "사시미", "덮밥", "라멘", "오마카세", "스시"],
            "중식": ["중식", "중국집", "짜장면", "짬뽕", "탕수육", "마라탕", "마라샹궈"],
            "양식": ["양식", "스테이크", "파스타", "피자", "샐러드","브런치", "그릴", "샌드위치", "브런치"],
            "일반미용업": ["미용실", "헤어", "파마", "컷", "염색"],
            "피부미용업": ["피부관리", "에스테틱", "스킨케어", "관리실"],
            "네일아트업": ["네일", "아트", "젤네일", "뷰티"],
            "메이크업업": ["메이크업", "화장", "브라이달", "뷰티"],
            "헬스/체력단련": ["헬스", "체력", "운동", "피트니스", "GYM"],
            "노래방": ["노래방", "KTV", "코인노래방", "가라오케"],
            "PC방": ["PC방", "게임", "인터넷", "컴퓨터", "피방", "피씨방", "피시방"],
            "당구장": ["당구", "포켓볼", "4구", "3구"],
            "분식": ["분식", "떡볶이", "김밥", "튀김", "순대","핫도그", "라면", "만두", "호떡"],
            "고기집": ["고기집", "한우", "삼겹살", "갈비", "육류", "고깃집"],
            "주점": ["주점", "술집", "포차", "맥주", "소주", "이자카야", "호프", "펍", "맥주바"],
            "축산/정육점": ["정육점", "축산", "고기", "육류", "소고기"],
            "건강기능식품일반판매업": ["건강식품", "영양제", "보조제", "건기식", "건강기능식품", "올리브영","보조식품", "비타민", "프로틴"],
            "숙박업": ["숙박", "호텔", "모텔", "펜션", "게스트하우스", "에어비앤비","리조트", "게하"],
            "여행업": ["여행사", "관광", "투어", "여행", "패키지"],
            "동물미용업": ["펫샵", "애견미용", "반려동물", "펫", "동물미용","애견카페", "펫카페"],
            "보드게임카페": ["보드게임", "카페", "게임", "보드"],
            "오락": ["오락실", "게임", "아케이드", "오락"],
            "기타": ["기타업종", "일반", "서비스업","키즈카페", "북카페", "작업실", "갤러리", "대리점"]
        }
      
    
    # 통계 데이터 텍스트 변환
    def row_to_text(self, row):
        업종 = str(row['업종구분'])
        연도 = str(int(row['연도']))
        syns = self.SYNONYMS.get(업종, [])
        
        # 핵심 통계만 추출
        safe = lambda x: str(x) if pd.notnull(x) and str(x).strip() != '' else '정보없음'
        
        return (
            f"[통계] {연도}년 {업종}: "
            f"창업률={safe(row.get('창업률(%)'))}%, "
            f"폐업률={safe(row.get('폐업률(%)'))}%, "
            f"1년생존율={safe(row.get('1년생존율(%)'))}%, "
            f"2년생존율={safe(row.get('2년생존율(%)'))}%, "
            f"3년생존율={safe(row.get('3년생존율(%)'))}%"
        )
    
    # 사업장 데이터 텍스트 변환 (수정됨)
    def business_row_to_text(self, row):
        try:
            업종명 = str(row.iloc[7])
            상태 = str(row.iloc[3])
            상호명 = str(row.iloc[5])
            
            # BIZ_SYNONYMS 제거 및 일반 동의어(SYNONYMS)만 사용
            syns = self.SYNONYMS.get(업종명, [])   
            return f"[사업장] {상호명} ({업종명}, {상태})"
        except Exception as e:
            return f"[사업장] 오류: {str(e)}"

# 전역 인스턴스
text_processor = TextProcessor()