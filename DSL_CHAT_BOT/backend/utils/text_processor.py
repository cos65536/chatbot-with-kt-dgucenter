import pandas as pd

class TextProcessor:
    def __init__(self):
        # 창업률 데이터 동의어 사전 // 새로운 업종이지만, 기존데이터와 연결가능할시 추가가능
        self.SYNONYMS = { # 혹시모를 대체어. LLM이 잘 해결하긴하겠지만. 이자카야, 하이디라오 같이 특이한 키워드 인식못할수있으니까 넣어둠
            "편의점": ["편의점", "CVS", "소매업"],
        "카페/제과제빵": ["카페", "커피", "베이커리", "제과", "디저트"],
        "치킨": ["치킨", "닭", "프라이드", "양념치킨"],
        "한식": ["한식", "백반", "정식", "국밥", "찌개"],
        "일식": ["일식", "초밥", "사시미", "덮밥", "라멘", "오마카세"],
        "중식": ["중식", "중국집", "짜장면", "짬뽕", "탕수육"],
        "양식": ["양식", "스테이크", "파스타", "피자", "샐러드"],
        "일반미용업": ["미용실", "헤어", "파마", "컷", "염색"],
        "피부미용업": ["피부관리", "에스테틱", "스킨케어", "관리실"],
        "네일아트업": ["네일", "아트", "젤네일", "뷰티"],
        "메이크업업": ["메이크업", "화장", "브라이달", "뷰티"],
        "헬스/체력단련": ["헬스", "체력", "운동", "피트니스", "GYM"],
        "노래방": ["노래방", "KTV", "코인노래방", "가라오케"],
        "PC방": ["PC방", "게임", "인터넷", "컴퓨터"],
        "당구장": ["당구", "포켓볼", "4구", "3구"],
        "분식": ["분식", "떡볶이", "김밥", "튀김", "순대"],
        "고기집": ["고기집", "한우", "삼겹살", "갈비", "육류"],
        "주점": ["주점", "술집", "포차", "맥주", "소주"],
        "축산/정육점": ["정육점", "축산", "고기", "육류", "소고기"],
        "건강기능식품일반판매업": ["건강식품", "영양제", "보조제", "건기식"],
        "숙박업": ["숙박", "호텔", "모텔", "펜션", "게스트하우스"],
        "여행업": ["여행사", "관광", "투어", "여행", "패키지"],
        "동물미용업": ["펫샵", "애견미용", "반려동물", "펫"],
        "보드게임카페": ["보드게임", "카페", "게임", "보드"],
        "오락": ["오락실", "게임", "아케이드", "오락"],
        "기타": ["기타업종", "일반", "서비스업"]
        }
        
        # 사업장 데이터 동의어 사전
        self.BIZ_SYNONYMS = {
            "건강기능식품일반판매업": ["건기식", "건강식품", "영양제", "보조식품", "비타민", "프로틴"],
            "제과점영업": ["빵집", "베이커리", "제과점", "디저트", "케이크", "마카롱"],
            "즉석판매제조가공업": ["즉석식품", "테이크아웃", "포장음식", "간편식", "도시락"]
        }
    
    def row_to_text(self, row):
        # 창업률 데이터 처리
        업종 = str(row['업종구분'])
        연도 = str(int(row['연도']))
        syns = self.SYNONYMS.get(업종, [])
        syn_str = f"({'/'.join([업종] + syns)})" if syns else 업종
        
        # 안전한 값 변환 함수
        safe = lambda x: str(x) if pd.notnull(x) and str(x).strip() != '' else '정보없음'
        
        # 모든 컬럼 처리 (연초 활동기업 수 포함)
        return (
            f"{연도}년 {syn_str}: "
            f"연초 활동기업 수 {safe(row.get('연초 활동기업 수', '정보없음'))}개, "
            f"창업 수 {safe(row.get('창업 수', '정보없음'))}개, "
            f"폐업 수 {safe(row.get('폐업 수', '정보없음'))}개, "
            f"창업률 {safe(row.get('창업률(%)', '정보없음'))}%, "
            f"폐업률 {safe(row.get('폐업률(%)', '정보없음'))}%, "
            f"창업기업수 {safe(row.get('창업기업수', '정보없음'))}개, "
            f"1년생존율 {safe(row.get('1년생존율(%)', '정보없음'))}%, "
            f"2년생존율 {safe(row.get('2년생존율(%)', '정보없음'))}%, "
            f"3년생존율 {safe(row.get('3년생존율(%)', '정보없음'))}%, "
            f"4년생존율 {safe(row.get('4년생존율(%)', '정보없음'))}%, "
            f"5년생존율 {safe(row.get('5년생존율(%)', '정보없음'))}%"
        )
    
    def business_row_to_text(self, row):
        # 사업장 데이터 처리 (변경 없음)
        try:
            업종명 = str(row.iloc[7])
            상태 = str(row.iloc[3])
            상호명 = str(row.iloc[5])
            
            syns = list(set(
                self.SYNONYMS.get(업종명, []) +
                self.BIZ_SYNONYMS.get(업종명, [])
            ))
            syn_str = f"({'/'.join([업종명] + syns)})" if syns else 업종명
            
            return f"동성로 {syn_str} 업종 사례: {상호명} ({상태})"
        except Exception as e:
            return f"사업장 정보 오류: {str(e)}"

# 전역 인스턴스
text_processor = TextProcessor()