name: Build & Deploy Backend & Frontend Containers

on:
  push:
    tags:
      - 'v*'  # v로 시작하는 태그가 메인 브랜치에 푸시될 때만 실행

env:
  REGISTRY: ghcr.io                      # GitHub 컨테이너 레지스트리 주소
  IMAGE_NAME: ${{ github.repository }}   # 깃허브 리포지토리명 자동 사용
  RUNPOD_API_URL: https://api.runpod.ai/v2/pods  # RunPod API 기본 경로

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # 우분투 최신 환경에서 실행
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # 리포지토리 코드 가져오기
       
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3  # GHCR 로그인
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}            # 깃허브 사용자명
          password: ${{ secrets.GITHUB_TOKEN }}    # 깃허브가 자동 발급해주는 토큰 (보안)
       
      - name: Build backend Docker image
        run: |
          # 소문자 변환된 이미지 이름 생성
          IMAGE_NAME_LOWER=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest" | tr '[:upper:]' '[:lower:]')
          # backend 폴더에서 도커 이미지 빌드
          docker build -t "$IMAGE_NAME_LOWER" ./DSL_CHAT_BOT/backend
          # GHCR에 빌드된 백엔드 이미지 푸시
          docker push "$IMAGE_NAME_LOWER"
       
      - name: Build frontend Docker image
        run: |
          # 소문자 변환된 이미지 이름 생성
          IMAGE_NAME_LOWER=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest" | tr '[:upper:]' '[:lower:]')
          # frontend 폴더에서 도커 이미지 빌드
          docker build -t "$IMAGE_NAME_LOWER" ./DSL_CHAT_BOT/frontend
          # GHCR에 빌드된 프론트엔드 이미지 푸시
          docker push "$IMAGE_NAME_LOWER"

  deploy-backend-runpod:
      needs: build-and-push
      runs-on: ubuntu-latest
      
      steps:
        - name: Update backend container on RunPod
          run: |
            set -e  # 에러 발생 시 중단
            
            # 백엔드 이미지 주소 (소문자로 통일)
            IMAGE_NAME_LOWER=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest" | tr '[:upper:]' '[:lower:]')
            echo "Using image: $IMAGE_NAME_LOWER"
            
            # RunPod API URL
            RUNPOD_API_BASE="https://rest.runpod.io/v1/pods"
            POD_ID="${{ secrets.RUNPOD_BACKEND_POD_ID }}"
            
            # 1. 현재 팟 상태 확인
            echo "Checking current pod status..."
            CURRENT_STATUS=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              "$RUNPOD_API_BASE/$POD_ID")
            echo "Current status: $CURRENT_STATUS"
            
            # 2. 팟 중지
            echo "Stopping pod..."
            STOP_RESPONSE=$(curl -s --request POST \
              --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              "$RUNPOD_API_BASE/$POD_ID/stop")
            echo "Stop response: $STOP_RESPONSE"
            
            # 3. 중지 상태 확인 (최대 60초 대기)
            echo "Waiting for pod to stop..."
            for i in {1..12}; do
              sleep 5
              STATUS_JSON=$(curl -s \
                --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
                "$RUNPOD_API_BASE/$POD_ID")
              
              # 상태 확인 (RunPod API 응답 구조에 맞게 수정)
              DESIRED_STATUS=$(echo "$STATUS_JSON" | jq -r '.desiredStatus // "unknown"')
              echo "Attempt $i: desiredStatus=$DESIRED_STATUS"
              
              if [ "$DESIRED_STATUS" = "EXITED" ] || [ "$DESIRED_STATUS" = "STOPPED" ]; then
                echo "Pod stopped successfully"
                break
              fi
              
              if [ $i -eq 12 ]; then
                echo "Warning: Pod may not have stopped completely, continuing anyway..."
              fi
            done
            
            # 4. 팟 업데이트 (PATCH 방식 사용)
            echo "Updating pod configuration..."
            UPDATE_RESPONSE=$(curl -s --request PATCH \
              --url "$RUNPOD_API_BASE/$POD_ID" \
              --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              --header "Content-Type: application/json" \
              --data "{
                \"imageName\": \"$IMAGE_NAME_LOWER\",
                \"containerDiskInGb\": 20,
                \"ports\": [\"8000/http\"],
                \"env\": {
                  \"NVIDIA_VISIBLE_DEVICES\": \"all\",
                  \"SERVICE_KEY\": \"${{ secrets.SERVICE_KEY }}\",
                  \"NAVER_CLIENT_ID\": \"${{ secrets.NAVER_CLIENT_ID }}\",
                  \"NAVER_CLIENT_SECRET\": \"${{ secrets.NAVER_CLIENT_SECRET }}\"
                },
                \"volumeInGb\": 50,
                \"volumeMountPath\": \"/workspace\"
              }")
            echo "Update response: $UPDATE_RESPONSE"
            
            # 5. 업데이트 성공 여부 확인
            if echo "$UPDATE_RESPONSE" | jq -e '.id // .podId' > /dev/null; then
              echo "Pod updated successfully"
            else
              echo "Error: Pod update may have failed"
              echo "Response: $UPDATE_RESPONSE"
              # 업데이트 실패해도 재시작은 시도해봄
            fi
            
            # 6. 팟 재시작
            echo "Starting pod..."
            START_RESPONSE=$(curl -s --request POST \
              --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              "$RUNPOD_API_BASE/$POD_ID/start")
            echo "Start response: $START_RESPONSE"
            
            # 7. 시작 상태 확인
            echo "Waiting for pod to start..."
            for i in {1..24}; do  # 2분 대기
              sleep 5
              STATUS_JSON=$(curl -s \
                --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
                "$RUNPOD_API_BASE/$POD_ID")
              
              DESIRED_STATUS=$(echo "$STATUS_JSON" | jq -r '.desiredStatus // "unknown"')
              echo "Attempt $i: desiredStatus=$DESIRED_STATUS"
              
              if [ "$DESIRED_STATUS" = "RUNNING" ]; then
                echo "Pod started successfully"
                
                # 추가: 팟 URL 출력 (있다면)
                POD_URL=$(echo "$STATUS_JSON" | jq -r '.urls.connect // "N/A"')
                echo "Pod URL: $POD_URL"
                break
              fi
              
              if [ $i -eq 24 ]; then
                echo "Warning: Pod may not have started properly"
                echo "Final status: $STATUS_JSON"
                exit 1
              fi
            done
            
            echo "Deployment completed successfully!"
            
            # 8. 최종 상태 출력
            echo "Final pod information:"
            curl -s \
              --header "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              "$RUNPOD_API_BASE/$POD_ID" | jq '.'

  # --------------------------------------------
  # ★ 아래는 프론트엔드 컨테이너도 RunPod 등 다른 서버에 배포하고 싶을 때 사용하세요 ★
  # 현재 프론트엔드는 Netlify에 이미 배포되어 있으므로 기본 워크플로우에는 포함하지 않습니다.
  #
  # deploy-frontend-runpod:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Deploy frontend container to RunPod
  #       run: |
  #         IMAGE_NAME_LOWER=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest" | tr '[:upper:]' '[:lower:]')
  #         curl -X POST \
  #           -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
  #           -H "Content-Type: application/json" \
  #           -d "{
  #             \"name\": \"dsl-chat-bot-frontend\",
  #             \"imageName\": \"${IMAGE_NAME_LOWER}\",
  #             \"gpuCount\": 0,
  #             \"containerDiskInGb\": 10,
  #             \"ports\": \"3000:3000\",
  #             \"env\": [
  #               {\"key\": \"REACT_APP_API_URL\", \"value\": \"${{ secrets.REACT_APP_API_URL }}\" }
  #             ]
  #           }" \
  #           https://api.runpod.ai/v2/pods

  #엔드포인트 api.runpod.ai/v2/k8s/pod <-변경시 https연결 제공, //  "gpuTypeId": "NVIDIA RTX 5000" 등으로 GPU타입 명시 필요
  # `"8000/http"`등으로 포트설정 변경도 필요함